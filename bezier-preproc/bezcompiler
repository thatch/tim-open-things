#!/usr/bin/env python2
# Usage: bezcompiler f.inc
# Writes f.inc.scad with a module called 'x'

import sys

def get_final_name(fn):
  return fn + '.scad'

def lerp(a, b, f):
  dx = b[0] - a[0]
  dy = b[1] - a[1]
  return (a[0] + f*dx, a[1] + f*dy)

def add2d(a, b):
  return a[0] + b[0], a[1] + b[1]

def sub2d(a, b):
  return add2d(b, invert2d(a))

def invert2d(a):
  return -a[0], -a[1]

def mirror(a, relative_to):
  delta = sub2d(a, relative_to)
  return add2d(relative_to, delta)

def distance_to_line(line_1, line_2, point):
  line_length = sub2d(line_2, line_1)
  normal = (line_length[0]**2 + line_length[1]**2)**0.5
  return abs((point[0] - line_1[0]) * (line_2[1] - line_1[1]) -
             (point[1] - line_1[1]) * (line_2[0] - line_1[0])) / normal

def skip_dupe(it):
  prev = None
  for i in it:
    if i != prev:
      yield i
      prev = i

class ParseError(Exception): pass

class CubicSpline(object):
  def __init__(self, point_list):
    self.curves = []
    if len(point_list) % 3 != 1:
      raise ValueError('Wrong number of points, expected 3n+1')

    last_control_point = None
    for i in range(len(point_list)/3):
      a, b, c, d = point_list[i*3:i*3+4]
      if b is None:
        b = mirror(last_control_point, a)

      self.curves.append([a, b, c, d])
      last_control_point = c


class Bezier(object):
  """Represents a bezier curve of arbitrary degree."""

  def __init__(self):
    self.error = 0.1
    self.steps = 100
    self.curves = {}
    self.current_curve = 'x'

  @classmethod
  def parse(cls, data):
    c = cls()
    for line in data.splitlines():
      line = line.strip()
      if line.startswith('#') or not line:
        continue
      elif line.endswith(':'):
        c.current_curve = line.strip()[:-1]
      elif '=' in line:
        key, value = line.split('=')
        if key == '$error':
          c.error = float(value)
        elif key == '$steps':
          c.steps = int(value)
        else:
          raise ParseError('Unknown command line %r' % (line,))
      else:
        # Lazily set to list, to avoid empty x object
        c.curves.setdefault(c.current_curve, [])
        # TODO handle multiple curves with hard corners
        obj = eval(line, {}, {'cubicspline': CubicSpline})
        if isinstance(obj, CubicSpline):
          c.curves[c.current_curve].extend(obj.curves)
        else:
          c.curves[c.current_curve].append(obj)
    return c

  def get_output(self, curves, name):
    buf = []
    # TODO make this quite a bit faster
    # TODO handle $error
    for i in range(len(curves)):
      # Fast path for single points, explicitly tuplify for the format operator
      # to work later, and avoid doing many pointless _reduce operations.
      if len(curves[i]) == 1:
        buf.append(tuple(curves[i][0]))
      else:
        if self.error == 0:
          # Original, all-non-duplicate-points included algorithm
          for i in xrange(self.steps+1):
            t = float(i) / self.steps
            p = self._reduce(curves[i], t)
            buf.append(p)
        else:
          # Subdivide by powers of 2, a smarter approximation on low-degree
          # curves.  This tends to cull segments that are straighter, while
          # leaving more where it has more of a curve.
          # N.b. Has a serious bug if the midpoint of the curve is near the
          # modpoint of start and end.  If you need to draw such a curve, set
          # $error=0 to use old method.
          def ev(t):
            return self._reduce(curves[i], t)

          def recursive(low, high, first_time=False):
            half = low + (high - low) / 2
            a = ev(low)
            b = ev(high)
            m = ev(half)
            dist = abs(distance_to_line(a, b, m))
            # A z-shaped curve needs to be divided, even though its midpoint is
            # the same as the midpoint of the line.
            if dist > self.error or first_time:
              recursive(low, half)
              recursive(half, high)
            else:
              buf.append(b)

          buf.append(tuple(curves[i][0]))
          recursive(0.0, 1.0, True)

    # TODO winding order appears CW
    try:
      return ('module %s() { polygon([%s], convexity=10); }\n' %
              (name, ','.join(skip_dupe('[%.6f,%.6f]' % p for p in buf)),))
    except:
      print "Buf", buf
      raise

  def get_full_output(self):
    buf = []
    for name, curve in self.curves.iteritems():
      buf.append(self.get_output(curve, name))
    return ''.join(buf)

  @classmethod
  def _reduce(cls, points, t):
    """Basic recursive degree reduction.  Stops when it gets a single point."""
    if len(points) == 1:
      return points[0]

    b = []
    for i in range(len(points)-1):
      b.append(lerp(points[i], points[i+1], t))
    return cls._reduce(b, t)

def main(files):
  for fn in files:
    with open(fn) as f:
      data = f.read()
    b = Bezier.parse(data)
    with open(get_final_name(fn), 'w') as f:
      f.write(b.get_full_output())

if __name__ == '__main__':
  main(sys.argv[1:])
